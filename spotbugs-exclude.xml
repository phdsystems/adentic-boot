<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
  <!-- Exclude EI_EXPOSE_REP for agent getWorkflow() methods - intentional API design -->
  <Match>
    <Class name="~com\.example\.softwareengineer\.agents\..*Agent"/>
    <Method name="getWorkflow"/>
    <Bug pattern="EI_EXPOSE_REP"/>
  </Match>

  <!-- Exclude EI_EXPOSE_REP for Lombok-generated getters/setters in config classes -->
  <Match>
    <Class name="~com\.example\.softwareengineer\.config\..*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Exclude EI_EXPOSE_REP for Lombok-generated getters/setters in WorkflowState -->
  <Match>
    <Class name="~com\.example\.softwareengineer\.workflow\.SoftwareEngineerWorkflowState.*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Exclude format string \n warnings for LLM prompts - intentional for prompt formatting -->
  <Match>
    <Class name="com.example.softwareengineer.prompts.PromptManager"/>
    <Bug pattern="VA_FORMAT_STRING_USES_NEWLINE"/>
  </Match>

  <!-- Exclude EI_EXPOSE_REP for Lombok-generated builders -->
  <Match>
    <Class name="~.*\$.*Builder"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Exclude EI_EXPOSE_REP for record-like classes with public accessors -->
  <Match>
    <Class name="~.*\$RefinementStrategy"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Exclude broad exception catch in context analyzer - handles various parsing errors -->
  <Match>
    <Class name="com.example.softwareengineer.context.ContextAnalyzer"/>
    <Method name="analyzeCodeStructure"/>
    <Bug pattern="REC_CATCH_EXCEPTION"/>
  </Match>

  <!-- Exclude constructor issues in Guardian - proper error handling at construction -->
  <Match>
    <Class name="com.example.softwareengineer.guardian.Guardian"/>
    <Bug pattern="CT_CONSTRUCTOR_THROW,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
  </Match>

  <!-- Exclude Orchestrator EI_EXPOSE_REP2 - dependency injection pattern -->
  <Match>
    <Class name="com.example.softwareengineer.orchestrator.Orchestrator"/>
    <Bug pattern="EI_EXPOSE_REP2"/>
  </Match>

  <!-- Exclude encoding issues in shell operations - platform default encoding intentional -->
  <Match>
    <Class name="~com\.example\.softwareengineer\.(context|tools)\..*"/>
    <Bug pattern="DM_DEFAULT_ENCODING,OS_OPEN_STREAM"/>
  </Match>

  <!-- Adentic Core: Exclude EI_EXPOSE_REP2 for ObjectMapper dependency injection in providers -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.providers\..*"/>
    <Bug pattern="EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Core: Exclude EI_EXPOSE_REP for FineTuningService and its inner classes -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.finetuning\.FineTuningService.*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Core: Exclude dead store in Replicate provider - variable used for debugging -->
  <Match>
    <Class name="dev.adeengineer.adentic.providers.inference.text.ReplicateTextGenerationProvider"/>
    <Bug pattern="DLS_DEAD_LOCAL_STORE"/>
  </Match>

  <!-- Adentic Boot: Exclude EI_EXPOSE_REP2 for ComponentScanner - ClassLoader is intentionally stored -->
  <Match>
    <Class name="dev.adeengineer.adentic.boot.scanner.ComponentScanner"/>
    <Bug pattern="EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Boot: Exclude EI_EXPOSE_REP for AgenticServer.getApp() - intentional API design -->
  <Match>
    <Class name="dev.adeengineer.adentic.boot.web.AgenticServer"/>
    <Method name="getApp"/>
    <Bug pattern="EI_EXPOSE_REP"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude hardcoded system paths in FileSystemConfig - security feature -->
  <Match>
    <Class name="dev.adeengineer.adentic.tool.filesystem.config.FileSystemConfig"/>
    <Method name="getDefaultBlockedPaths"/>
    <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude constructor throw for Tool classes - proper initialization validation -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\.(database|marketdata|webtest)\..*Tool"/>
    <Bug pattern="CT_CONSTRUCTOR_THROW"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude EI_EXPOSE_REP for Lombok-generated model classes -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\..*\.model\..*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude EI_EXPOSE_REP for config classes - dependency injection pattern -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\..*\.config\..*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude EI_EXPOSE_REP for provider base classes - intentional API design -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\..*\.provider\..*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude EI_EXPOSE_REP2 for Tool class constructors - dependency injection -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\..*Tool"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude SQL injection warnings in H2DatabaseProvider - validated column names -->
  <Match>
    <Class name="dev.adeengineer.adentic.tool.database.provider.H2DatabaseProvider"/>
    <Bug pattern="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude false positive null check in FileSystemTool.buildFileInfo -->
  <Match>
    <Class name="dev.adeengineer.adentic.tool.filesystem.FileSystemTool"/>
    <Method name="buildFileInfo"/>
    <Bug pattern="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
  </Match>

  <!-- Adentic Boot Tools: Exclude EI_EXPOSE_REP2 for security classes - dependency injection -->
  <Match>
    <Class name="~dev\.adeengineer\.adentic\.tool\..*\.security\..*"/>
    <Bug pattern="EI_EXPOSE_REP,EI_EXPOSE_REP2"/>
  </Match>
</FindBugsFilter>
